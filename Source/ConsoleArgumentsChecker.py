#==========================================================================================#
# >>>>> ИСКЛЮЧЕНИЯ <<<<< #
#==========================================================================================#

# Исключение: флаг не поддерживается.
class FlagNotSupported(Exception):

	#==========================================================================================#
	# >>>>> СВОЙСТВА <<<<< #
	#==========================================================================================#

	# Сообщение об ошибке.
	__Message = "for command \"COMMAND\" flag \"FLAG\" isn't supported."

	#==========================================================================================#
	# >>>>> МЕТОДЫ <<<<< #
	#==========================================================================================#

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str, Flag: str): 
		self.__Message = self.__Message.replace("COMMAND", Command)
		self.__Message = self.__Message.replace("FLAG", Flag)
		super().__init__(self.__Message) 
			
	# Информатор: вызывается при выводе исключения в консоль.
	def __str__(self):
		return self.__Message

# Исключение: ключ не поддерживается.
class KeyNotSupported(Exception):

	#==========================================================================================#
	# >>>>> СВОЙСТВА <<<<< #
	#==========================================================================================#

	# Сообщение об ошибке.
	__Message = "for command \"COMMAND\" key \"KEY\" isn't supported."

	#==========================================================================================#
	# >>>>> МЕТОДЫ <<<<< #
	#==========================================================================================#

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str, Key: str): 
		self.__Message = self.__Message.replace("COMMAND", Command)
		self.__Message = self.__Message.replace("KEY", Key)
		super().__init__(self.__Message) 
			
	# Информатор: вызывается при выводе исключения в консоль.
	def __str__(self):
		return self.__Message

# Исключение: недостаточно аргументов.
class NotEnoughArguments(Exception):

	#==========================================================================================#
	# >>>>> СВОЙСТВА <<<<< #
	#==========================================================================================#

	# Сообщение об ошибке.
	__Message = "not enough arguments."

	#==========================================================================================#
	# >>>>> МЕТОДЫ <<<<< #
	#==========================================================================================#

	# Конструктор: вызывается при обработке исключения.
	def __init__(self): 
		super().__init__(self.__Message) 
			
	# Информатор: вызывается при выводе исключения в консоль.
	def __str__(self):
		return self.__Message

# Исключение: слишком много аргументов.
class TooManyArguments(Exception):

	#==========================================================================================#
	# >>>>> СВОЙСТВА <<<<< #
	#==========================================================================================#

	# Сообщение об ошибке.
	__Message = "too many arguments."

	#==========================================================================================#
	# >>>>> МЕТОДЫ <<<<< #
	#==========================================================================================#

	# Конструктор: вызывается при обработке исключения.
	def __init__(self): 
		super().__init__(self.__Message) 
			
	# Информатор: вызывается при выводе исключения в консоль.
	def __str__(self):
		return self.__Message

# Исключение: неизвестная комманда.
class UnknownCommand(Exception):

	#==========================================================================================#
	# >>>>> СВОЙСТВА <<<<< #
	#==========================================================================================#

	# Сообщение об ошибке.
	__Message = "\""

	#==========================================================================================#
	# >>>>> МЕТОДЫ <<<<< #
	#==========================================================================================#

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str): 
		self.__Message += Command + "\"."
		super().__init__(self.__Message) 
			
	# Информатор: вызывается при выводе исключения в консоль.
	def __str__(self):
		return self.__Message

#==========================================================================================#
# >>>>> КЛАССЫ <<<<< #
#==========================================================================================#

# Обработчик консольных аргументов.
class ConsoleArgumentsChecker():

	#==========================================================================================#
	# >>>>> СВОЙСТВА <<<<< #
	#==========================================================================================#

	# Имя главного файла.
	__MainFile = None
	# Набор обрабатываемых команд.
	__Commands = dict()
	# Список флагов из аргументов.
	__Flags = list()
	# Список ключей из аргументов.
	__Keys = list()
	# Список аргументов командной строки.
	__Argv = None

	#==========================================================================================#
	# >>>>> МЕТОДЫ <<<<< #
	#==========================================================================================#

	# Устанавливает в свойства список флагов из аргументов.
	def __GetFlags(self):
		
		# Проверить каждый аргумент на тип: флаг.
		for Argument in self.__Argv:
			if len(Argument) > 1 and Argument[0] == '-':
				self.__Flags.append(Argument)

	# Устанавливает в свойства список ключей из аргументов.
	def __GetKeys(self):

		# Проверить каждый аргумент на тип: ключ.
		for Argument in self.__Argv:
			if len(Argument) > 3 and Argument.count('=') == 1:
				self.__Keys.append(Argument.split('=')[0] + "=")

	# Конструктор: задаёт описательную структуру тайтла.
	def __init__(self, Argv: list):

		#---> Генерация свойств.
		#==========================================================================================#
		self.__Argv = Argv

		# Получение имени главного файла.
		if "\\" in Argv[0]:
			self.__MainFile = Argv[0].split('\\')[-1]
		elif "/" in Argv[0]:
			self.__MainFile = Argv[0].split('/')[-1]

		# Получение флагов из аргументов.
		self.__GetFlags()
		# Получение ключей из аргументов.
		self.__GetKeys()

	# Проверяет условия выполнения команды и возвращает её название.
	def CheckCommand(self) -> str:
		# Команда.
		Command = self.__Argv[1]

		# Проверка доступности команды.
		if Command not in self.__Commands.keys():
			raise UnknownCommand(Command)

		# Проверка минимального количества аргументов.
		if self.__Commands[Command]["minimal-arguments-count"] > len(self.__Argv):
			raise NotEnoughArguments()

		# Проверка максимального количества аргументов.
		if len(self.__Argv) > self.__Commands[Command]["minimal-arguments-count"] + len(self.__Commands[Command]["keys"]) + len(self.__Commands[Command]["flags"]):
			raise TooManyArguments()

		# Проверка поддерживаемости всех флагов.
		for Flag in self.__Flags:
			if Flag not in self.__Commands[Command]["flags"]:
				raise FlagNotSupported(Command, Flag)

		# Проверка поддерживаемости всех ключей.
		for Key in self.__Keys:
			if Key not in self.__Commands[Command]["keys"]:
				raise KeyNotSupported(Command, Key)

		return Command

	# Проверяет наличие флага.
	def CheckFlag(self, Flag: str) -> bool:

		# Проверка наличия флага в аргументах.
		if Flag in self.__Argv:
			return True

		return False

	# Возвращает команду.
	def GetCommand(self):
		return self.__Argv[1]

	# Возвращает значение ключа аргумента.
	def GetKeyValue(self, Key: str):
		# Поиск ключа.
		for Argument in self.__Argv:
			
			if Key in Argument and "=" in Argument:
				return Argument.replace(Key + "=", "")

		return None

	# Возвращает название главного файла.
	def GetMainFileName(self):
		return self.__MainFile

	# Задаёт шаблон обрабатываемой команды.
	def SetCommand(self, Name: str, MinimalArgumentsCount: int, Keys: list = list(), Flags: list = ["-s"]):
		# Буфер команды.
		Bufer = dict()
		# Заполнение данных о команде.
		Bufer["minimal-arguments-count"] = MinimalArgumentsCount + 1
		Bufer["keys"] = Keys
		Bufer["flags"] = Flags

		self.__Commands[Name] = Bufer
		
